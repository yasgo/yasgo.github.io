{"version":3,"sources":["components/layout/Header.js","pages/home/Home.js","pages/add/Add.js","pages/list/List.js","App.js","serviceWorker.js","index.js"],"names":["Header","to","className","this","props","pages","map","item","index","key","path","location","pathname","title","Component","withRouter","Home","Add","state","name","age","job","updateInput","bind","e","setState","target","value","Form","Group","Label","Control","type","onChange","placeholder","Button","onClick","addNewUser","List","list","editUser","isUpdate","splice","Table","striped","bordered","hover","editValue","ButtonGroup","saveUser","variant","cancelUser","deleteUser","App","newUserData","Container","exact","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f5a5e7b4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\n\nclass Header extends Component {    \n    render() {\n        return (\n            <header>\n                <Link to=\"/\" className=\"logo\">TODO LIST</Link>\n                <nav>\n                    {\n                        this.props.pages.map((item, index) =>\n                            <Link\n                                key={index}\n                                to={item.path}\n                                className={`${(this.props.location.pathname === item.path) ? 'active' : ''}`}\n                                >{item.title}</Link>\n                        )\n                    }\n                </nav>\n            </header>\n        );\n    }\n}\n\nexport default withRouter(Header)","import React, { Component } from 'react';\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>Hoşgeldiniz</div>\n        );\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { Form, Button } from 'react-bootstrap';\n\nclass Add extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            age: '',\n            job: ''\n        }\n\n        this.updateInput = this.updateInput.bind(this);\n    }\n\n    updateInput(e) {\n        this.setState({[e.target.name]: e.target.value});\n    }\n    \n    render() {\n        return (\n            <Form>\n                <Form.Group>\n                    <Form.Label>Ad Soyad</Form.Label>\n                    <Form.Control name=\"name\" type=\"text\" onChange={this.updateInput} placeholder=\"Ad Soyad\" />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Yaş</Form.Label>\n                    <Form.Control name=\"age\" type=\"text\" onChange={this.updateInput} placeholder=\"Yaş\" />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Meslek</Form.Label>\n                    <Form.Control name=\"job\" type=\"text\" onChange={this.updateInput} placeholder=\"Meslek\" />\n                </Form.Group>\n                <Button onClick={() => this.props.addNewUser(this.state)}>Ekle</Button>\n            </Form>\n        );\n    }\n}\n\nexport default Add;","import React, { Component } from 'react';\nimport { Table, Button, Form, ButtonGroup } from \"react-bootstrap\";\n\nclass List extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            list: this.props.list\n        }\n\n        this.editUser = this.editUser.bind(this);\n    }\n\n    editValue(index, e) {\n        const newList = this.state.list[index];\n        newList[e.target.name] = e.target.value;\n\n        this.setState({\n            list: this.state.list\n        });\n    }\n\n    editUser(index) {\n        const newList = this.state.list[index];\n        newList.isUpdate = true;\n\n        this.setState({\n            list: this.state.list\n        });\n    }\n\n    saveUser(index) {\n        const newList = this.state.list[index];\n        newList.isUpdate = false;\n\n        this.setState({\n            list: this.state.list\n        });\n    }\n\n    cancelUser(index) {\n        const newList = this.state.list[index];\n        newList.isUpdate = false;\n\n        this.setState({\n            list: this.state.list\n        });\n    }\n\n    deleteUser(index) {\n        const newList = this.state.list;\n        newList.splice(index, 1);\n\n        this.setState({\n            list: this.state.list\n        })\n    }\n\n    render() {\n        return (\n            <Table striped bordered hover>\n                <thead>\n                    <tr>\n                        <th>Ad Soyad</th>\n                        <th>Yaş</th>\n                        <th>Meslek</th>\n                        <th>Aksiyon</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        this.state.list.map((item, index) =>\n                            <tr key={index}>\n                                <td>\n                                    {\n                                        item.isUpdate ? (\n                                            <Form.Control value={item.name} name=\"name\" type=\"text\" onChange={(e) => this.editValue(index, e)} placeholder=\"Ad Soyad\" />\n                                        ) : (\n                                                item.name\n                                            )\n                                    }\n                                </td>\n                                <td>\n                                    {\n                                        item.isUpdate ? (\n                                            <Form.Control value={item.age} name=\"age\" type=\"text\" onChange={(e) => this.editValue(index, e)} placeholder=\"Yaş\" />\n                                        ) : (\n                                                item.age\n                                            )\n                                    }\n                                </td>\n                                <td>\n                                    {\n                                        item.isUpdate ? (\n                                            <Form.Control value={item.job} name=\"job\" type=\"text\" onChange={(e) => this.editValue(index, e)} placeholder=\"Yaş\" />\n                                        ) : (\n                                                item.job\n                                            )\n                                    }\n                                </td>\n                                <td>\n                                    {\n                                        item.isUpdate ? (\n                                            <ButtonGroup>\n                                                <Button className=\"mr-2\" onClick={() => this.saveUser(index)}>Kaydet</Button>\n                                                <Button variant=\"danger\" onClick={() => this.cancelUser(index)}>İptal</Button>\n                                            </ButtonGroup>\n                                        ) : (\n                                            <ButtonGroup>\n                                                <Button className=\"mr-2\" onClick={() => this.editUser(index)}>Düzenle</Button>\n                                                <Button variant=\"danger\" onClick={() => this.deleteUser(index)}>Sil</Button>\n                                            </ButtonGroup>\n                                        )\n                                    }\n                                </td>\n                            </tr>\n                        )\n                    }\n                </tbody>\n            </Table>\n        );\n    }\n}\n\nexport default List;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Container } from \"react-bootstrap\";\n\nimport Header from './components/layout/Header';\n\nimport Home from './pages/home/Home';\nimport Add from './pages/add/Add';\nimport List from './pages/list/List';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            pages: [\n                {\n                    title: 'EKLE',\n                    path: '/add'\n                },\n                {\n                    title: 'LİSTELEME',\n                    path: '/list'\n                }\n            ],\n            list: [\n                {\n                    name: 'Yasin Burak Kalkan',\n                    age: '27',\n                    job: 'Polis',\n                    isUpdate: false\n                },\n                {\n                    name: 'Burak Karatoprak',\n                    age: '24',\n                    job: 'Manav',\n                    isUpdate: false\n                }\n            ]\n        }\n\n        this.addNewUser = this.addNewUser.bind(this);\n    }\n\n    addNewUser(newUserData) {\n        this.setState({\n            list: [...this.state.list, {\n                name: newUserData.name,\n                age: newUserData.age,\n                job: newUserData.job\n            }]\n        });\n    }\n    \n    render() {\n        return (\n            <Router>\n                <Container>\n                    <Header pages={this.state.pages} />\n                    <Switch>\n                        <Route exact path=\"/\" component={Home} />\n                        <Route exact path=\"/add\" component={() => <Add addNewUser={(newUserData) => this.addNewUser(newUserData)} />} />\n                        <Route exact path=\"/list\" component={() => <List list={this.state.list} />} />\n                    </Switch>\n                </Container>\n            </Router>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './style/App.scss'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}